{"version":3,"sources":["hoc/withAuthRedirect.js","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","DialogItem","className","classes","dialog","id","activeClassName","active","name","Message","message","Dialogs","validate","Yup","max","dialogsPage","dialogsElements","dialogs","map","el","messagesElements","messages","dialogsItems","initialValues","validationSchema","onSubmit","values","onSubmitProps","sendMessage","resetForm","formik","TextField","label","type","disabled","dirty","isValid","isSubmitting","compose","dispatch","sendMessageAC"],"mappings":"0OAIIA,EAA6B,SAAAC,GAAK,MAAK,CACvCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAe,IACtCC,EADqC,4JAEvC,WACI,OAAKC,KAAKC,MAAMN,OACT,cAACG,EAAD,eAAeE,KAAKC,QADI,cAAC,IAAD,CAAUC,GAAG,eAHT,GACXC,IAAML,WAStC,OAFuCM,YAAQX,EAARW,CAAoCL,K,oBCf/EM,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,SAAW,4B,sHCYxOC,EATI,SAAAN,GACjB,OACE,qBAAKO,UAAWC,IAAQC,OAAxB,SACE,cAAC,IAAD,CAASR,GAAI,YAAcD,EAAMU,GAAIC,gBAAiBH,IAAQI,OAA9D,SAAuEZ,EAAMa,UCApEC,EAJC,SAAAd,GACd,OAAO,qBAAKO,UAAWC,IAAQO,QAAxB,SAAkCf,EAAMe,W,iCCsElCC,EAjEC,SAAAhB,GACd,IAAMiB,EAAWC,IAAW,CAC1BH,QAASG,MAAaC,IAAI,GAAI,2GAE5B1B,EAAQO,EAAMoB,YAEdC,EAAkB5B,EAAM6B,QAAQC,KAAI,SAAAC,GAAE,OACxC,cAAC,EAAD,CAAwBX,KAAMW,EAAGX,KAAMH,GAAIc,EAAGd,IAA7Bc,EAAGd,OAGlBe,EAAmBhC,EAAMiC,SAASH,KAAI,SAAAC,GAAE,OAC1C,cAAC,EAAD,CAAqBT,QAASS,EAAGT,SAAnBS,EAAGd,OAQnB,OACE,sBAAKH,UAAWC,IAAQc,QAAxB,UACE,qBAAKf,UAAWC,IAAQmB,aAAxB,SAAuCN,IACvC,sBAAKd,UAAWC,IAAQkB,SAAxB,UACE,8BAAMD,IACN,8BACE,cAAC,IAAD,CACEG,cAAe,CACbb,QAAS,IAEXc,iBAAkBZ,EAClBa,SAhBU,SAACC,EAAQC,GAC3BhC,EAAMiC,YAAYF,EAAOhB,SACzBiB,EAAcE,aASR,SAOG,SAACC,GACA,OACE,sBAAK5B,UAAU,iBAAf,UACE,oBAAIA,UAAU,kCAAd,yBAGA,eAAC,IAAD,WACE,cAAC6B,EAAA,EAAD,CAAWC,MAAM,UAAUxB,KAAK,UAAUyB,KAAK,aAC/C,wBACE/B,UAAU,oBACV+B,KAAK,SACLC,UAAWJ,EAAOK,QAAUL,EAAOM,QAHrC,0BAOA,wBACElC,UAAU,2BACV+B,KAAK,QACLC,SAAUJ,EAAOO,eAAiBP,EAAOK,MAH3C,qCClCLG,sBACbxC,aAfoB,SAAAV,GACpB,MAAO,CACL2B,YAAa3B,EAAM2B,gBAIE,SAAAwB,GACvB,MAAO,CACLX,YAAa,SAAClB,GACZ6B,EAASC,YAAc9B,SAO3BnB,IAFa+C,CAGb3B","file":"static/js/4.e9824da1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nlet mapStateToPropsForRedirect = state => ({\r\n    isAuth: state.auth.isAuth,\r\n  });\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render () {\r\n            if (!this.props.isAuth) return <Redirect to='/login' />\r\n            return <Component {...this.props} />\r\n        }\r\n    }    \r\n      \r\n    let ConnectedAuthRedirectComomponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComomponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__32vGc\",\"dialogsItems\":\"Dialogs_dialogsItems__2lO4W\",\"dialog\":\"Dialogs_dialog__2MHz-\",\"active\":\"Dialogs_active__17ygD\",\"messages\":\"Dialogs_messages__2bN9H\",\"message\":\"Dialogs_message__1iz90\",\"textarea\":\"Dialogs_textarea__29CNr\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classes from '../Dialogs.module.css';\r\n\r\nconst DialogItem = props => {\r\n  return (\r\n    <div className={classes.dialog}>\r\n      <NavLink to={'/dialogs/' + props.id} activeClassName={classes.active}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default DialogItem;\r\n","import React from 'react';\r\nimport classes from '../Dialogs.module.css';\r\n\r\nconst Message = props => {\r\n  return <div className={classes.message}>{props.message}</div>;\r\n};\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport classes from './Dialogs.module.css';\r\nimport Message from './Message/Message';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Formik, Form } from 'formik';\r\nimport { TextField } from '../Login/TextField';\r\nimport * as Yup from 'yup';\r\n\r\nconst Dialogs = props => {\r\n  const validate = Yup.object({\r\n    message: Yup.string().max(30, 'Максимум 30 символов!'),\r\n  });\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElements = state.dialogs.map(el => (\r\n    <DialogItem key={el.id} name={el.name} id={el.id} />\r\n  ));\r\n\r\n  let messagesElements = state.messages.map(el => (\r\n    <Message key={el.id} message={el.message} />\r\n  ));\r\n\r\n  let onSendMessage = (values, onSubmitProps) => {\r\n    props.sendMessage(values.message);\r\n    onSubmitProps.resetForm();\r\n  };\r\n\r\n  return (\r\n    <div className={classes.dialogs}>\r\n      <div className={classes.dialogsItems}>{dialogsElements}</div>\r\n      <div className={classes.messages}>\r\n        <div>{messagesElements}</div>\r\n        <div>\r\n          <Formik\r\n            initialValues={{\r\n              message: '',\r\n            }}\r\n            validationSchema={validate}\r\n            onSubmit={onSendMessage}\r\n          >\r\n            {(formik) => {\r\n              return (\r\n                <div className='container mt-3'>\r\n                  <h1 className='my-4 font-weight-bold display-6'>\r\n                    Add message\r\n                  </h1>\r\n                  <Form>\r\n                    <TextField label='Message' name='message' type='textarea' />\r\n                    <button\r\n                      className='btn btn-dark mt-3'\r\n                      type='submit'\r\n                      disabled={!formik.dirty || !formik.isValid}\r\n                    >\r\n                      Send message\r\n                    </button>\r\n                    <button\r\n                      className='btn btn-danger mt-3 ms-3'\r\n                      type='reset'\r\n                      disabled={formik.isSubmitting || !formik.dirty}\r\n                    >\r\n                      Reset\r\n                    </button>\r\n                  </Form>\r\n                </div>\r\n              );\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport {\r\n  sendMessageAC\r\n} from '../../redux/dialogsReducer';\r\nimport Dialogs from './Dialogs';\r\n\r\nlet mapStateToProps = state => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = dispatch => {\r\n  return {\r\n    sendMessage: (message) => {\r\n      dispatch(sendMessageAC(message));\r\n    },\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}